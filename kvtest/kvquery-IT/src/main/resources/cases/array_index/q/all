################
bind1.q
################
# partial key
declare
$ext1_1 integer; // 3
select id
from Foo t
where t.rec.a = 10 and t.rec.c.ca =any $ext1_1



################
bind2.q
################
#
# complete key
#
declare
$ext1_1 integer; // 3
select id
from Foo t
where t.rec.a = 10 and t.rec.c.ca =any $ext1_1 and t.rec.f = 4.5



################
bind3.q
################
#
# partial key and range; only one multi-key pred pushed
#
declare
$ext3_1 integer; // 10
select id
from Foo t
where t.rec.a = 10 and $ext3_1 <=any t.rec.c.ca and t.rec.c.ca <any $ext3_1



################
bind4.q
################
#
# complete key and always true pred
#
declare
$ext4_1 integer; // 20
select id
from Foo t
where t.rec.a = 10 and
      t.rec.c.ca >=any 3 and t.rec.c.ca =any $ext4_1 and
      t.rec.f = 4.5



################
bind5.q
################
#
# partial key and range; only one multi-key pred pushed, the other
# is always true
#  
declare
$ext5_1 integer; // 6
select id
from Foo t 
where t.rec.a = 10 and t.rec.c.ca >=any $ext5_1 and t.rec.c.ca >any 6



################
err1.q
################
select id
from Foo t
where t.rec.a = 10 and t.rec.c.ca = 6



################
err2.q
################
select id
from Foo t
where t.rec.a = 100 and t.rec.c.ca >= 5




################
filter01.q
################
#
# partial key and always true pred.
#
select id
from Foo t
where t.rec.d.d2 >=any 3 and t.rec.d[$element.d3 = 3].d2 =any 15



################
filter02.q
################
select /* FORCE_INDEX(Foo idx_d_f) */id
from Foo t
where t.rec.f = 4.5 and exists t.rec.d[11 < $element.d2 and $element.d2 < 20]



################
filter03.q
################
select id
from foo f
where exists f.rec.b[10 < $element and $element <= 20]



################
filter04.q
################
select /*+ FORCE_INDEX(Foo idx_b) */ id
from foo f
where exists f.rec[$element.f = 4.5].b[10 < $element and $element <= 20]



################
filter05.q
################
select id
from foo f
where exists f.rec[$element.c.ca =any 3].b[10 < $element and $element <= 20]



################
filter06.q
################
select id
from foo f
where exists f.rec[$element.a = 10].b[10 < $element and $element <= 20]



################
filter07.q
################
select /* FORCE_INDEX(Foo idx_a_c_f) */ id
from foo f
where exists 
      f.rec[$element.a = 10 and $element.c.ca =any 3].b[10 < $element and $element <= 20]



################
filter08.q
################
select /* FORCE_INDEX(Foo idx_d_f) */ id
from Foo t
where t.rec[$element.f = 4.5].d[11 < $element.d2 and $element.d2 < 20].d3 =any 13



################
filter09.q
################
select /*+ FORCE_INDEX(Foo idx_d_f) */ id
from Foo t
where t.rec[$element.a > 0].d[11 < $element.d2 and $element.d2 < 20].d3 =any 12



################
filter10.q
################
select id
from foo f
where exists f.rec.b[10 < $element and $element <= 20 and $pos > 1]



################
filter11.q
################
select id
from Foo t
where exists t.rec[$element.f = 4.5].d[$element.d2 = 20]



################
filter12.q
################
select /* FORCE_INDEX(Foo idx_a_c_f) */ id
from foo f
where exists 
      f.rec[$element.a = 10 and $element.c.ca =any 3].b[]



################
filter13.q
################
select id
from foo f
where exists f.rec.b[]



################
filter14.q
################
select /* FORCE_INDEX(Foo idx_d_f) */ id
from Foo t
where t.rec.d[11 < $element.d2].d2 <any 20




################
limit01.q
################
select id
from foo f
where f.rec.b[] <any 0
limit 3



################
q10.q
################
#
# partial key and range; only one multi-key pred pushed, the other
# is always true
#  
select id
from Foo t 
where t.rec.a = 10 and t.rec.c[].ca <=any 3 and t.rec.c[].ca <any 3



################
q11.q
################
# partial key
select id, t.rec.b
from Foo t
where t.rec.a = 10 and t.rec.c.ca =any 3



################
q12.q
################
#
# partial key
#
select id,  [ t.rec.d.d2 ]
from Foo t
where t.rec.a = 10 and t.rec.c.ca =any 3 and (t.rec.f = 4.5 or t.rec.d[0].d2 > 0) 



################
q13.q
################
# partial key and range
select id
from Foo t 
where t.rec.a = 10 and t.rec.c[].ca >any 3



################
q14.q
################
select id
from foo f
where f.rec.b[] = 1000



################
q1.q
################
# partial key
select id
from Foo t
where t.rec.a = 10 and t.rec.c.ca =any 3



################
q2.q
################
#
# complete key
#
select id
from Foo t
where t.rec.a = 10 and t.rec.c.ca =any 3 and t.rec.f = 4.5



################
q3.q
################
#
# key gap
#
select id
from Foo t
where t.rec.a = 10 and t.rec.f = 4.5



################
q4.q
################
#
# partial key and range
#
select id
from Foo t
where t.rec.a = 10 and t.rec.c.ca >any 6



################
q5.q
################
#
# partial key and range; only one multi-key pred pushed
#
select id
from Foo t
where t.rec.a = 10 and 10 <=any t.rec.c.ca and t.rec.c.ca <any 10



################
q6.q
################
#
# partial key and range; only one multi-key pred pushed. Notice that
# compared to q5, we have only changed the order of 2 predicates, but
# we get different result w.r.t. duplicates.
#
select id
from Foo t
where t.rec.a = 10 and t.rec.c.ca <any 10 and 10 <=any t.rec.c.ca



################
q7.q
################
#
# complete key and unrecognized always true pred
# TODO: recognize the always true pred
#
select id
from Foo t
where t.rec.a = 10 and
      t.rec.c.ca >=any 3 and t.rec.c.ca =any 20 and
      t.rec.f = 4.5



################
q8.q
################
#
# partial key and range; only one multi-key pred pushed, the other
# is always true
#  
select id
from Foo t 
where t.rec.a = 10 and t.rec.c.ca >=any 6 and t.rec.c.ca >any 6



################
q9.q
################
#
# partial key and range; only one multi-key pred pushed, the other ia
# always true. Same as q8, but with the positions of the preds swapped.
#  
select id
from Foo t 
where t.rec.a = 10 and t.rec.c.ca >any 6 and t.rec.c.ca >=any 6



################
slicing01.q
################
#
# partial key
#
select id
from Foo t
where t.rec.d[1:2].d2 =any 15



################
slicing02.q
################
#
# looks like a complete key, but we cannot actually push more than one
# multi-key column pred, even if the preds are on different multi-key
# columns.
#
select id
from Foo t
where t.rec.d[1:2].d2 =any 15 and t.rec.d[].d3 =any -6 and t.rec.f = 4.5



################
slicing03.q
################
#
# key gap, nothing pushed
#
select id
from Foo t
where t.rec.d[0:1].d2 =any t.rec.b[2] and t.rec.f = 4.5



################
slicing04.q
################
#
# partial key and what looks like an always true pred, but isn't.
#
select id
from Foo t
where t.rec.d[0:1].d2 <=any 15 and t.rec.d[$element.d3 = 3].d2 =any 15



################
slicing06.q
################
#
# range and what looks like an always true pred, but isn't.
#
select id
from Foo t
where t.rec.d[0:1].d2 <=any 12 and t.rec.d[2:3].d2 <any 15



################
slicing07.q
################
#
# range and what looks like an always true pred, but isn't.
#
select id
from Foo t
where t.rec.d[0:1].d2 <=any 9 and t.rec.d[2:3].d2 <any 6



################
slicing08.q
################
#
# range and what looks like an always true pred, but isn't.
#
select id
from Foo t
where t.rec.d[2:3].d2 >=any 15 and t.rec.d[1:3].d2 >any 15



################
slicing09.q
################
#
# range and what looks like an always true pred, but isn't.
#
select id
from Foo t
where t.rec.d[1:3].d2 >any 15 and  t.rec.d[2:3].d2 >=any 15



################
slicing10.q
################

select id
from Foo t
where t.rec.a = 10 and t.rec.c[1].ca = 20



################
sort01.q
################
select id, f.rec.a
from Foo f
order by f.rec.a



################
upd01.q
################
update foo f
set f.rec.f = 3.4
where id = 1



################
upd02.q
################
update foo f
set f.rec.c.cb = $ + 3
where id = 1



################
upd03.q
################
update foo f
set f.rec.c.ca = $ + 3
where id = 1



################
upd04.q
################
update foo f
set f.rec.b[2] = $ + 2
where id = 0



################
upd05.q
################
update foo f
set f.rec.b = [ 1, 2 ]
where id = 0



################
upd06.q
################
update foo f
set f.rec.c = [ ]
where id = 2



################
upd07.q
################
update foo f
set f.rec.d.d1 = 5
where id = 0



################
upd08.q
################
update foo f
set f.rec.d.d3 = $ + 5
where id = 0



################
upd09.q
################
update foo f
set f.rec.d[1].d3 = $ + 5
where id = 0



################
upd10.q
################
update foo f
put f.rec.d[1]  { "d1" : -6 }
where id = 0



################
upd11.q
################
update foo f
add f.rec.b  -6 
where id = 0



################
upd12.q
################
update foo f
add f.rec.c { "ca" : 13, "cb" : 33 } 
where id = 4



################
upd13.q
################
update foo f
set ttl 3 hours
where id = 4



