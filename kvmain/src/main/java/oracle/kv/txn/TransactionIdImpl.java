/*-
 * Copyright (C) 2011, 2024 Oracle and/or its affiliates. All rights reserved.
 *
 * This file was distributed by Oracle as part of a version of Oracle NoSQL
 * Database made available at:
 *
 * http://www.oracle.com/technetwork/database/database-technologies/nosqldb/downloads/index.html
 *
 * Please see the LICENSE file included in the top-level directory of the
 * appropriate version of Oracle NoSQL Database for a copy of the license and
 * additional information.
 */

package oracle.kv.txn;

import java.util.UUID;

import oracle.kv.impl.util.FormatUtils;

/**
 * Object that represents a transaction id. The transaction id is a unique
 * id associated with a particular transaction.
 */
public class TransactionIdImpl {

    /**
     * Id of shard where the transaction is performed
     */
    private final int shardId;
    /**
     * Transaction id generated by internal JE env
     */
    private final long txnId;
    /**
     * Timestamp of commit (abort) for committed(aborted) transaction.
     */
    private final long timestamp;
    /**
     * Optional UUID
     */
    private final UUID uuid;

    public TransactionIdImpl(int shardId,
                             long txnId,
                             long timestamp) {
        this.shardId = shardId;
        this.txnId = txnId;
        this.timestamp = timestamp;
        uuid = UUID.randomUUID();
    }

    /**
     * Returns id of shard where the transaction is performed
     * @return shard id
     */
    public int getShardId() {
        return shardId;
    }

    /**
     * Returns the internal transaction id generated by JE environment. The
     * id is shard-wide unique and
     * @return the internal transaction id
     */
    public long getInternalTxnId() {
        return txnId;
    }

    public long getTimestamp() {
        return timestamp;
    }

    public UUID getUuid() {
        return uuid;
    }

    @Override
    public String toString() {
        return "Txn[shard=" + shardId + ", id=" + txnId +
               ", timestamp=" + FormatUtils.formatPerfTime(timestamp) +
               " (" + timestamp + ")]";
    }
}
