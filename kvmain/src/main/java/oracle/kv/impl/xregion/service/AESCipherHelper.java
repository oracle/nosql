/*-
 * Copyright (C) 2011, 2025 Oracle and/or its affiliates. All rights reserved.
 *
 * This file was distributed by Oracle as part of a version of Oracle NoSQL
 * Database made available at:
 *
 * http://www.oracle.com/technetwork/database/database-technologies/nosqldb/downloads/index.html
 *
 * Please see the LICENSE file included in the top-level directory of the
 * appropriate version of Oracle NoSQL Database for a copy of the license and
 * additional information.
 */

package oracle.kv.impl.xregion.service;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.util.Arrays;
import java.util.Base64;
import java.util.logging.Logger;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import javax.security.auth.DestroyFailedException;

import oracle.kv.impl.util.Pair;
import oracle.kv.impl.util.server.LoggerUtils;

/**
 * A wrapper that simplifies the use of an AES cipher.
 */
public class AESCipherHelper {

    private static final String CIPHER_ALGO = "AES";
    private static final String CIPHER_TRANS = "AES/CBC/PKCS5Padding";
    private static final String SECRET_KEY_ALGO = "PBKDF2WithHmacSHA1";
    private static final int IV_LENGTH = 16;

    private final Logger logger;
    private final SecureRandom random;
    /** key spec generated from password */
    private final SecretKeySpec keySpec;
    /** thread local cipher for concurrent encryption and decryption */
    private final ThreadLocal<Cipher> localCipher;

    private final static int PASSWD_LENGTH_BYTES = 16;
    private final static int SALT_LENGTH_BYTES = 16;

    /**
     * Creates an AES cipher with given password
     * @param file     file to store the password and salt
     * @param logger   logger
     */
    public AESCipherHelper(String file, Logger logger) {
        if (file == null || file.isEmpty()) {
            throw new IllegalArgumentException("invalid file");
        }
        final Pair<byte[], byte[]> pass = getPasswdSalt(file, logger);
        this.logger = logger;
        random = new SecureRandom();
        keySpec = generateKeySpec(pass.first(), pass.second());
        localCipher = ThreadLocal.withInitial(this::generateCipher);
        /* forget the password after use */
        Arrays.fill(pass.first(), (byte) 0x00);
        Arrays.fill(pass.second(), (byte) 0x00);
    }

    /**
     * Encrypts a string and returns a concat string of IV followed by
     * the cipher text
     * @param str plain text to encrypt
     * @return a concat string of IV followed by the cipher text
     */
    public String encrypt(String str) {
        if (str == null) {
            throw new IllegalArgumentException("null string");
        }
        try {
            final Cipher cipher = localCipher.get();
            cipher.init(Cipher.ENCRYPT_MODE, keySpec, getRandomIv());
            final byte[] iv = cipher.getIV();
            final byte[] ciphertext =
                cipher.doFinal(str.getBytes(StandardCharsets.UTF_8));
            final byte[] all = new byte[iv.length + ciphertext.length];
            System.arraycopy(iv, 0, all, 0, iv.length);
            System.arraycopy(ciphertext, 0, all, iv.length, ciphertext.length);
            return Base64.getEncoder().encodeToString(all);
        } catch (Exception exp) {
            final String err = "Error in encrypting: " + exp.getMessage();
            logger.warning(lm(err + "\n" + LoggerUtils.getStackTrace(exp)));
            throw new IllegalStateException(err, exp);
        }
    }

    /**
     * Decrypts a string that generated by {@link #encrypt(String)}
     * @param str string to encrypt
     * @return a plain text
     */
    public String decrypt(String str) {
        if (str == null) {
            throw new IllegalArgumentException("null string");
        }
        try {
            final Cipher cipher = localCipher.get();
            final byte[] all = Base64.getDecoder().decode(str);
            cipher.init(Cipher.DECRYPT_MODE, keySpec,
                        new IvParameterSpec(all, 0, IV_LENGTH));
            final byte[] original =
                cipher.doFinal(all, IV_LENGTH, all.length - IV_LENGTH);
            return new String(original);
        } catch (Exception exp) {
            final String err = "Error in decrypting: " + exp.getMessage();
            logger.warning(lm(err + "\n" + LoggerUtils.getStackTrace(exp)));
            throw new IllegalStateException(err, exp);
        }
    }

    private SecretKeySpec generateKeySpec(byte[] pass, byte[] salt) {
        try {
            final char[] password = new char[pass.length];
            for (int i = 0; i < pass.length; i++) {
                password[i] = (char) pass[i];
            }
            final KeySpec spec = new PBEKeySpec(password, salt, 65536, 256);
            Arrays.fill(password, (char) 0);
            final SecretKeyFactory f =
                SecretKeyFactory.getInstance(SECRET_KEY_ALGO);
            final SecretKey secretKey = f.generateSecret(spec);
            final byte[] keybytes = secretKey.getEncoded();
            try {
                secretKey.destroy();
            } catch (DestroyFailedException e) {
                /* The destroy should work, but nothing to do if it doesn't */
            }
            final SecretKeySpec sk = new SecretKeySpec(keybytes, CIPHER_ALGO);
            Arrays.fill(keybytes, (byte) 0);
            logger.info(lm("Algorithm=" + sk.getAlgorithm() + ", " +
                           "format=" + sk.getFormat() + ", " +
                           "key length=" + sk.getEncoded().length));
            return sk;
        } catch (NoSuchAlgorithmException | InvalidKeySpecException exp) {
            throw new IllegalStateException("Cannot create key spec", exp);
        }
    }

    private IvParameterSpec getRandomIv() {
        final byte[] ivBytes = new byte[IV_LENGTH];
        random.nextBytes(ivBytes);
        return new IvParameterSpec(ivBytes);
    }

    private Cipher generateCipher() {
        try {
            return Cipher.getInstance(CIPHER_TRANS);
        } catch (Exception exp) {
            final String err = "Error in creating cipher: " + exp.getMessage();
            logger.warning(lm(err + "\n" + LoggerUtils.getStackTrace(exp)));
            throw new IllegalStateException(err, exp);
        }
    }

    public static Pair<byte[], byte[]> getPasswdSalt(String file,
                                                     Logger logger) {
        final File myfile = new File(file);
        if (myfile.exists()) {
            logger.info(lm("read from file=" + file));
            return readPasswdSalt(myfile, logger);
        }
        /* generate password and salt */
        final SecureRandom random = new SecureRandom();
        final byte[] salt = new byte[SALT_LENGTH_BYTES];
        random.nextBytes(salt);
        final byte[] pass = new byte[PASSWD_LENGTH_BYTES];
        random.nextBytes(pass);
        writePasswdSalt(file, pass, salt, logger);
        return new Pair<>(pass, salt);
    }

    private static Pair<byte[], byte[]> readPasswdSalt(File file,
                                                       Logger logger) {
        final byte[] passwd = new byte[PASSWD_LENGTH_BYTES];
        final byte[] salt = new byte[SALT_LENGTH_BYTES];
        int count = 0;
        try (FileInputStream fis = new FileInputStream(file)) {
            count += fis.read(passwd);
            count += fis.read(salt);
            logger.info(lm("read bytes=" + count + " from file=" +
                           file.getAbsolutePath()));
            return new Pair<>(passwd, salt);
        } catch (IOException ex) {
            final String err = "Cannot read file=" + file +
                               ", " + ex.getMessage();
            logger.warning(lm(err));
            throw new IllegalStateException(err, ex);
        }
    }

    private static void writePasswdSalt(String file, byte[] passwd,
                                        byte[] salt, Logger logger) {
        try (FileOutputStream fos = new FileOutputStream(file)) {
            final File myfile = new File(file);
            if (!myfile.exists()) {
                final boolean succ = myfile.createNewFile();
                if (!succ) {
                    logger.warning(lm("Unable to create file=" + file));
                    return;
                }
            }
            fos.write(passwd);
            fos.write(salt);
            logger.info(lm("Create and write to file=" + file));
        } catch (IOException ex) {
            final String err = "Cannot write to file=" + file +
                               ", " + ex.getMessage();
            throw new IllegalStateException(err, ex);
        }
    }

    private static String lm(String log) {
        return "[AESCipherHelper] " + log;
    }
}
